// Generated by CoffeeScript 1.6.3
(function() {
  var $, EventEmitter, connector, passevent, service, supportedServices, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = require("jquery");

  connector = require("./connector");

  EventEmitter = require("events").EventEmitter;

  service = exports;

  supportedServices = {};

  passevent = function(type, scope) {
    var _this = this;
    return function(data) {
      return scope.emit(type, data);
    };
  };

  service.ServiceSet = (function(_super) {
    __extends(ServiceSet, _super);

    function ServiceSet(_arg) {
      var host;
      host = (_arg != null ? _arg : {}).host;
      if (host !== (typeof window !== "undefined" && window !== null ? window.location.host : void 0)) {
        this.host = host;
      }
    }

    ServiceSet.prototype.use = function(services) {
      var Constructor, name, opts, s;
      for (name in services) {
        opts = services[name];
        if (!isNaN(Number(opts))) {
          opts = {
            version: opts
          };
        }
        Constructor = supportedServices[name] || service.GenericService;
        if (!opts.version) {
          throw Error('Missing required option "version"');
        }
        s = new Constructor({
          name: name,
          host: opts.hasOwnProperty('host') ? opts.host : this.host,
          version: opts.version
        });
        s.on('request', passevent('request', this));
        s.on('success', passevent('success', this));
        s.on('fail', passevent('fail', this));
        s.on('done', passevent('done', this));
        this[name] = s;
      }
      return this;
    };

    return ServiceSet;

  })(EventEmitter);

  service.GenericService = (function(_super) {
    __extends(GenericService, _super);

    function GenericService(_arg) {
      this.host = _arg.host, this.name = _arg.name, this.version = _arg.version;
      this.connector = connector.connect(this.host);
    }

    GenericService.prototype.basePath = function() {
      return "/api/" + this.name + "/v" + this.version;
    };

    GenericService.prototype.service_url = function(path) {
      console.log("GenericService.service_url is deprecated. Use serviceUrl instead");
      return this.serviceUrl(path);
    };

    GenericService.prototype.serviceUrl = function(path) {
      var url;
      url = this.basePath() + path;
      if (this.host) {
        url = "//" + this.host + url;
      }
      return url;
    };

    GenericService.prototype.perform = function(method, endpoint, params) {
      var data, request,
        _this = this;
      request = this.connector.perform(method, this.serviceUrl(endpoint), params);
      data = {
        method: method,
        endpoint: endpoint,
        params: params,
        service: this,
        request: request
      };
      this.emit('request', data);
      request.then(function() {
        return _this.emit('success', data);
      });
      request.fail(function() {
        return _this.emit('fail', data);
      });
      request.always(function() {
        return _this.emit('done', data);
      });
      return request;
    };

    GenericService.prototype.get = function(endpoint, params) {
      return this.perform('GET', endpoint, params);
    };

    GenericService.prototype.cachedGet = function(endpoint) {
      return this.connector.cachedGet(this.serviceUrl(endpoint));
    };

    GenericService.prototype.post = function(endpoint, params) {
      return this.perform('POST', endpoint, params);
    };

    GenericService.prototype["delete"] = function(endpoint, params) {
      return this.perform('DELETE', endpoint, params);
    };

    GenericService.prototype.put = function(url, params) {
      return this.perform('PUT', url, params);
    };

    return GenericService;

  })(EventEmitter);

  service.CheckpointService = (function(_super) {
    __extends(CheckpointService, _super);

    function CheckpointService() {
      _ref = CheckpointService.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CheckpointService.prototype.selectProvider = function() {
      throw "Not implemented.\nPlease implement this method in your app and make sure it returns a promise which\nresolves with the selected service";
    };

    CheckpointService.prototype._registerFocusMessageHandler = function() {
      this._registerFocusMessageHandler = Function.prototype;
      return $(window).on("message", function(e) {
        if (e.data === 'checkpoint-login-success') {
          return window.focus();
        }
      });
    };

    CheckpointService.prototype.login = function(provider, opts) {
      var deferred, params, poll, pollId, url, win,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      opts.pollInterval || (opts.pollInterval = 1000);
      opts.display || (opts.display = 'popup');
      if (provider == null) {
        return this.selectProvider().then(function(provider) {
          return _this.login(provider, opts);
        });
      }
      params = [];
      params.push("display=" + opts.display);
      if (opts.redirectTo != null) {
        params.push("redirect_to=" + opts.redirectTo);
      }
      url = this.serviceUrl("/login/" + provider + "?" + (params.join("&")));
      win = window.open(url, "checkpointlogin_" + new Date().getTime(), 'width=1024,height=800');
      this._registerFocusMessageHandler();
      deferred = $.Deferred();
      poll = function() {
        return _this.get("/identities/me").then(function(me) {
          var _ref1;
          if ((((_ref1 = me.identity) != null ? _ref1.id : void 0) != null) && !me.identity.provisional && me.accounts.indexOf(provider) > -1) {
            win.close();
            window.focus();
            deferred.resolve(me);
            return clearInterval(pollId);
          } else if (win.closed) {
            return deferred.reject("Login window closed by user");
          }
        });
      };
      pollId = setInterval(poll, opts.pollInterval);
      return deferred;
    };

    CheckpointService.prototype.logout = function() {
      return this.post("/logout");
    };

    return CheckpointService;

  })(service.GenericService);

  supportedServices.checkpoint = service.CheckpointService;

}).call(this);
