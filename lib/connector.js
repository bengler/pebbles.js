// Generated by CoffeeScript 1.6.3
(function() {
  var $, connector, path, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  connector = exports;

  path = require("path");

  $ = require("jquery");

  connector.connect = function(host) {
    if ((host != null) && host !== (typeof window !== "undefined" && window !== null ? window.location.host : void 0) && !$.support.cors) {
      return new connector.XDMConnector({
        host: host
      });
    } else {
      return new connector.BasicConnector({
        host: host
      });
    }
  };

  connector.AbstractConnector = (function() {
    function AbstractConnector(_arg) {
      this.host = _arg.host;
      this.cache = {};
    }

    AbstractConnector.prototype.cached_get = function(url) {
      console.log("AbstractConnector.cached_get is deprecated. Use cachedGet instead");
      return this.cachedGet(url);
    };

    AbstractConnector.prototype.cachedGet = function(url) {
      var _base;
      return (_base = this.cache)[url] || (_base[url] = this.perform('GET', url));
    };

    AbstractConnector.prototype.clearCache = function() {
      return this.cache = {};
    };

    AbstractConnector.prototype.methodOverride = function(method, url, params, headers) {
      headers || (headers = {});
      if (method !== 'GET' && method !== 'POST') {
        headers["X-Http-Method-Override"] = method;
        params || (params = {});
        params['_method'] = method;
        method = 'POST';
      }
      return [method, url, params, headers];
    };

    AbstractConnector.prototype.isXDomain = function() {
      return this.host && this.host !== (typeof window !== "undefined" && window !== null ? window.location.host : void 0);
    };

    return AbstractConnector;

  })();

  connector.BasicConnector = (function(_super) {
    __extends(BasicConnector, _super);

    function BasicConnector() {
      _ref = BasicConnector.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BasicConnector.prototype.perform = function(method, url, params, headers) {
      var requestOpts, _ref1;
      _ref1 = this.methodOverride(method, url, params, headers), method = _ref1[0], url = _ref1[1], params = _ref1[2], headers = _ref1[3];
      requestOpts = {
        data: params,
        type: method,
        headers: headers
      };
      if (params && method === 'POST') {
        requestOpts.contentType = 'application/json';
        requestOpts.data = Object.prototype.toString.call(params) === '[object String]' ? params : JSON.stringify(params);
      }
      if (this.isXDomain()) {
        requestOpts.xhrFields || (requestOpts.xhrFields = {});
        requestOpts.xhrFields.withCredentials = true;
        requestOpts.headers["X-Requested-With"] = "XMLHttpRequest";
      }
      return $.ajax(url, requestOpts);
    };

    return BasicConnector;

  })(connector.AbstractConnector);

  connector.XDMConnector = (function(_super) {
    var initEasyXDMFrom;

    __extends(XDMConnector, _super);

    initEasyXDMFrom = (function() {
      var cache;
      cache = {};
      return function(host) {
        var basePath, easyXDMScriptUrl, loaded;
        if (cache[host]) {
          return cache[host];
        }
        loaded = cache[host] = $.Deferred();
        basePath = "/api/checkpoint/v1/resources/easyXDM";
        easyXDMScriptUrl = "//" + host + basePath + "/easyXDM.min.js";
        return $.getScript(easyXDMScriptUrl).then(function() {
          var easyXDM, rpc;
          easyXDM = (window.easyXDM != null) && window.easyXDM.noConflict('Pebbles');
          if (easyXDM) {
            rpc = new easyXDM.Rpc({
              remote: "http://" + host + basePath + "/cors/index.html"
            }, {
              remote: {
                request: {}
              }
            });
            return loaded.resolve(rpc);
          } else {
            delete cache[host];
            return loaded.reject("Could not load easyXDM from " + easyXDMScriptUrl + ". Verify that the script is served from that location.");
          }
        });
      };
    })();

    function XDMConnector() {
      XDMConnector.__super__.constructor.apply(this, arguments);
      this.ready = initEasyXDMFrom(this.host);
      this.ready.fail(function(message) {
        throw new Error("Unable to initialize easyXDM: " + message);
      });
    }

    XDMConnector.prototype.perform = function(method, url, params, headers) {
      var deferred, _ref1;
      _ref1 = this.methodOverride(method, url, params, headers), method = _ref1[0], url = _ref1[1], params = _ref1[2], headers = _ref1[3];
      deferred = $.Deferred();
      this.ready.then(function(rpc) {
        var error, success;
        if (params && method === 'POST') {
          headers['Content-Type'] = 'application/json';
          if (Object.prototype.toString.call(params) === '[object String]') {
            params = JSON.parse(params);
          }
        }
        success = function(response) {
          var e;
          return deferred.resolve((function() {
            try {
              return JSON.parse(response.data);
            } catch (_error) {
              e = _error;
              return response;
            }
          })());
        };
        error = function(error) {
          deferred.reject(error);
          throw new Error("EasyXDM request error: " + error.message + " (error code " + error.code + ").");
        };
        return rpc.request({
          url: url,
          method: method,
          headers: headers,
          data: params
        }, success, error);
      });
      return deferred.promise();
    };

    return XDMConnector;

  })(connector.AbstractConnector);

}).call(this);
